/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Chat;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.net.MalformedURLException;
import java.nio.charset.StandardCharsets;
import java.security.*;
import javax.swing.JOptionPane;
import java.rmi.*;
/**
 *
 * @author james
 */
public class Login extends javax.swing.JFrame {
    
    private static String ipAddress;
    
    /**
     * Creates new form login
     */
    public Login() {
        initComponents();
        
        // Set the login button to trigger when Enter key pressed
        this.getRootPane().setDefaultButton(btnLogin);
        
        
        //Center the window
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txfUsername = new javax.swing.JTextField();
        btnLogin = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();
        pwfPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat Login");

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        txfUsername.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txfUsernameActionPerformed(evt);
            }
        });

        btnLogin.setText("Login");
        btnLogin.setBorder(null);
        btnLogin.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnLoginActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Welcome to EncryptoChat!");

        btnRegister.setText("Register");
        btnRegister.setBorderPainted(false);
        btnRegister.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRegister, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txfUsername)
                                    .addComponent(pwfPassword))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pwfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Get username and password from the text fields
        String username = txfUsername.getText();
        String password = String.valueOf(pwfPassword.getPassword());
        if (username.equals("") && password.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Username and Password fields can not be blank");
            return;
        }
        if (username.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Username can not be blank");
            return;
        }
        if (password.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Password can not be blank");
            return;
        }
        
        byte[] pwHash;
        
        //Hash password
        try
        {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            pwHash = digest.digest(password.getBytes(StandardCharsets.UTF_8));
        }
        
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return;
        }
        try
        {
            // Tell the program where to find the security.policy file
            System.setProperty("java.security.policy", "security.policy");
            if (System.getSecurityManager() == null)
            {
                System.setSecurityManager(new RMISecurityManager());
            }
            
            // Tell the program where the RMI server is 
            
            System.setProperty("java.rmi.server.hostname",ipAddress);
            serverInterface stub = (serverInterface)Naming.lookup("rmi://" + ipAddress + ":1099/123");
            System.out.println("Connected to Database Server");
            
            // Attempt login to the server
            boolean valid = stub.login(username, pwHash);
            if (valid)
            {
                // Login was successfull
                JOptionPane.showMessageDialog(this, "Logged in Successfully");
                // Pass the username and stub into the ChatUI
                ChatUI chatui = new ChatUI(username, stub, ipAddress);
                chatui.setVisible(true);
                this.dispose();
            }
            else
            {
                // Login failed
                JOptionPane.showMessageDialog(this, "Failed to login");
                System.out.println("Disconnected from Database Server");
            }
        }
        catch (ConnectException e)
        {
            // Can't connect to the server
            JOptionPane.showMessageDialog(this, "Server is currently down or invalid IP given. Please try again later");
        }
        catch (MalformedURLException e)
        {
            System.out.println("Invalid IP given");
        }
        catch (Exception e)
        {
           e.printStackTrace();
        }
        
    }//GEN-LAST:event_btnLoginActionPerformed

    private void txfUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfUsernameActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // Get the username and password from the text fields
        String username = txfUsername.getText();
        String password = String.valueOf(pwfPassword.getPassword());
        if (username.equals("") && password.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Username and Password fields can not be blank");
            return;
        }
        if (username.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Username can not be blank");
            return;
        }
        if (password.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Password can not be blank");
            return;
        }
        
        
        byte[] pwHash;
        
        //Hash password
        try
        {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            pwHash = digest.digest(password.getBytes(StandardCharsets.UTF_8));
        }
        
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return;
        }
        
        // Tell the program where the RMI server is  
        System.setProperty("java.rmi.server.hostname", ipAddress);
        
        try
        {
            serverInterface stub = (serverInterface) Naming.lookup("rmi://" + ipAddress + ":1099/123");
            
            // Attempt to add the user
            if (stub.addUser(username, pwHash))
            {
                JOptionPane.showMessageDialog(this, "Successfully Registered! You can now log in with your details");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Failed to register. Do you already have an account?");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
        
        try
        {
            ipAddress = args[0];
        }
        catch (ArrayIndexOutOfBoundsException e)
        {
            System.out.println("No IP given, using localhost");
            ipAddress = "127.0.0.1";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField pwfPassword;
    private javax.swing.JTextField txfUsername;
    // End of variables declaration//GEN-END:variables
}
